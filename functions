#!/bin/bash

set -eu
set -o pipefail

# Library of functions for the kayobe development environment.

FUNCTIONS_PARENT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
export OPENSTACK_CONFIG_REPO_ROOT="$FUNCTIONS_PARENT/.."
export OPENSTACK_CONFIG_AUTOMATION_CONFIG_PATH="${OPENSTACK_CONFIG_AUTOMATION_CONFIG_PATH:-$OPENSTACK_CONFIG_REPO_ROOT/.automation.conf}"

# Configuration

function config_defaults {
    # Set default values for kayobe development configuration.

    export OPENSTACK_CONFIG_VENV_PATH="${OPENSTACK_CONFIG_VENV_PATH:-$HOME/venvs/openstack-config}"
    export OPENSTACK_CONFIG_PIP_INSTALL_ARGS="${OPENSTACK_CONFIG_PIP_INSTALL_ARGS:--r $OPENSTACK_CONFIG_REPO_ROOT/requirements.txt}"
    export OPENSTACK_CONFIG_ANSIBLE_EXTRA_ARGS="${OPENSTACK_CONFIG_ANSIBLE_EXTRA_ARGS:-}"

    # Log directory in case of errors
    export LOGDIR=${LOGDIR:-}

    # Ansible defaults
    export ANSIBLE_FORCE_COLOR=${ANSIBLE_FORCE_COLOR:-True}
}

function config_set {
    # Source the configuration file, config.sh

    if [ -f "${OPENSTACK_CONFIG_AUTOMATION_CONFIG_PATH}/config.sh" ]; then
        source "${OPENSTACK_CONFIG_AUTOMATION_CONFIG_PATH}/config.sh"
    fi
}

function config_check {
    # Check the configuration environment variables.
    if [[ -z "${OPENSTACK_CONFIG_PREFIX:+x}" ]]; then
        die $LINENO "OPENSTACK_CONFIG_PREFIX must be set. This is the prefix to all playbooks. e.g p3"
    fi
    if [ -z ${OPENSTACK_CONFIG_OPENRC:+x} ]; then
        die $LINENO "You must define OPENSTACK_CONFIG_OPENRC. This should contain the contents of" \
                    "OpenStack clouds.yaml file"
    fi
}

function config_init {
    config_set
    config_defaults
    config_check
}

# Utility functions

# Prints backtrace info
# filename:lineno:function
# backtrace level
function backtrace {
    local level=$1
    local deep
    deep=$((${#BASH_SOURCE[@]} - 1))
    echo "[Call Trace]"
    while [ $level -le $deep ]; do
        echo "${BASH_SOURCE[$deep]}:${BASH_LINENO[$deep-1]}:${FUNCNAME[$deep-1]}"
        deep=$((deep - 1))
    done
}

# Prints line number and "message" then exits
# die $LINENO "message"
function die {
    local exitcode=$?
    set +o xtrace
    local line=$1; shift
    if [ $exitcode == 0 ]; then
        exitcode=1
    fi
    backtrace 2
    err $line "$*"
    # Give buffers a second to flush
    sleep 1
    exit $exitcode
}


# Prints line number and "message" in error format
# err $LINENO "message"
function err {
    local exitcode=$?
    local xtrace
    xtrace=$(set +o | grep xtrace)
    set +o xtrace
    local msg="[ERROR] ${BASH_SOURCE[2]}:$1 $2"
    echo "$msg" 1>&2;
    if [[ -n ${LOGDIR} ]]; then
        echo "$msg" >> "${LOGDIR}/error.log"
    fi
    $xtrace
    return $exitcode
}


function sudo_if_available {
    if [[ -e "/usr/bin/sudo" ]]; then
        sudo "$@"
        return
    fi
    "$@"
}

function pause(){
   echo "Press [Enter] to continue..."
   read -p "$*"
}


function install_venv {
    # Install a virtualenv at $1. The rest of the arguments are passed
    # directly to pip.
    venv_path="$1"
    shift
    pip_paths="$@"
    local venv_parent="$(dirname ${venv_path})"
    if [[ ! -d "$venv_parent" ]]; then
        mkdir -p "$venv_parent"
    fi
    #if [[  -f "${venv_path}/bin/activate" ]]; then
    if [[ ! -f "${venv_path}/bin/activate" ]]; then
        echo "Creating virtual environment in ${venv_path}"
        virtualenv -p python3 "${venv_path}"
        # NOTE: Virtualenv's activate and deactivate scripts reference an
        # unbound variable.
        set +u
        source "${venv_path}/bin/activate"
        pip install -U pip
        pip uninstall -y ansible
        pip install $pip_paths
        deactivate
        set -u
    else
        echo "Using existing virtual environment in ${venv_path}"
    fi
}

function install_dependencies {
    echo "Installing package dependencies for openstack-config"
    sudo_if_available dnf -y install git python3-pyyaml python3-virtualenv libffi-devel openssh-clients which
}

# Runtime

function environment_setup {
    install_venv "${OPENSTACK_CONFIG_VENV_PATH}" ${OPENSTACK_CONFIG_PIP_INSTALL_ARGS}

    # NOTE: Virtualenv's activate script references an unbound variable.
    set +u
    source "${OPENSTACK_CONFIG_VENV_PATH}/bin/activate"
    set -u

    ansible-galaxy install -p "$OPENSTACK_CONFIG_REPO_ROOT/ansible/roles" -r $REPO_ROOT/requirements.yml
}

function workarounds {
    ln -s /usr/bin/python3 /usr/bin/python
}

function openstack_config_init {
    config_init
    install_dependencies
    workarounds
    environment_setup
}

function run_openstack_config {
    # NOTE: This shells out to the um6p-config tool as I wanted to use the same script
    # that you would run manually, but maybe it would be better to use a shared library.
    #
    VAULT_HELPER=""
    if [ ! -z ${OPENSTACK_CONFIG_VAULT_PASSWORD:+x} ]; then
        VAULT_HELPER="--vault-password-file $FUNCTIONS_PARENT/utils/vault-helper.sh"
    fi
    echo "$OPENSTACK_CONFIG_OPENRC" > /dev/shm/openrc
    source /dev/shm/openrc
    if [ "${OS_AUTH_TYPE:-x}" != "v3applicationcredential" ]; then
        die $LINENO "Password auth is not supported. Please use an application credential."
    fi
    # Using -e "@$FUNCTIONS_PARENT/extra-vars/auth-override.yml" means that we only support app creds, but as this
    # is desirable, no effort has been made to support password auth.
    "$OPENSTACK_CONFIG_REPO_ROOT/tools/um6p-config" "${@}" -- -e ansible_connection=local -e "@$FUNCTIONS_PARENT/extra-vars/auth-override.yml" $VAULT_HELPER $OPENSTACK_CONFIG_ANSIBLE_EXTRA_ARGS
}
